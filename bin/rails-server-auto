#!/usr/bin/env bash
# Improved Rails server script that ensures all required services are running

# Function to log messages with timestamps
log() {
  echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

# Function to check if a service is running and start it if needed
ensure_service_running() {
  local service_name=$1
  local check_command=$2
  local start_command=$3

  log "Checking if $service_name is running..."

  if eval "$check_command"; then
    log "$service_name is already running."
  else
    log "$service_name is not running. Starting $service_name..."
    eval "$start_command"

    # Wait for service to start
    local max_attempts=10
    local attempt=1
    local delay=2

    while [ $attempt -le $max_attempts ]; do
      log "Waiting for $service_name to start (attempt $attempt/$max_attempts)..."
      sleep $delay

      if eval "$check_command"; then
        log "$service_name started successfully."
        return 0
      fi

      attempt=$((attempt + 1))
    done

    log "ERROR: Failed to start $service_name after $max_attempts attempts."
    return 1
  fi

  return 0
}

# Function to clean up resources before exit
cleanup() {
  log "Cleaning up resources..."

  # Close any open file descriptors
  exec 3>&- 4>&- 5>&- 2>/dev/null

  log "Cleanup complete"
}

# Set up trap for clean exit
trap cleanup EXIT INT TERM

# Change to the Rails root directory
cd "$(dirname "$0")/.."
APP_ROOT=$(pwd)

# Create necessary directories
mkdir -p "$APP_ROOT/tmp/pids"
mkdir -p "$APP_ROOT/log"

# Check and start PostgreSQL if needed
if ! ensure_service_running "PostgreSQL" "pg_isready -q" "brew services start postgresql@14"; then
  log "ERROR: Cannot start Rails server without PostgreSQL."
  exit 1
fi

# Check and start Redis if needed
if ! ensure_service_running "Redis" "redis-cli ping > /dev/null 2>&1" "brew services start redis"; then
  log "ERROR: Cannot start Rails server without Redis."
  exit 1
fi

# Kill any existing SolidQueue processes
log "Checking for existing SolidQueue processes..."
pkill_output=$(pgrep -f "solid_queue_monitor.rb" || echo "")
if [ -n "$pkill_output" ]; then
  log "Killing existing SolidQueue processes: $pkill_output"
  pkill -f solid_queue_monitor.rb
  sleep 2

  # Double-check that processes are actually killed
  pkill_output=$(pgrep -f "solid_queue_monitor.rb" || echo "")
  if [ -n "$pkill_output" ]; then
    log "Forcefully killing remaining processes: $pkill_output"
    pkill -9 -f solid_queue_monitor.rb
    sleep 1
  fi
fi

# Kill any existing Rails runner processes
log "Checking for existing Rails runner processes..."
pkill_output=$(pgrep -f "rails runner" || echo "")
if [ -n "$pkill_output" ]; then
  log "Killing existing Rails runner processes: $pkill_output"
  pkill -f "rails runner"
  sleep 2

  # Double-check that processes are actually killed
  pkill_output=$(pgrep -f "rails runner" || echo "")
  if [ -n "$pkill_output" ]; then
    log "Forcefully killing remaining processes: $pkill_output"
    pkill -9 -f "rails runner"
    sleep 1
  fi
fi

# Clean up any stale PID files
log "Cleaning up stale PID files..."
find tmp/pids -name "*.pid" -delete 2>/dev/null || true
find tmp/pids -name "*.lock" -delete 2>/dev/null || true

# Initialize and check database connection
log "Initializing database if needed..."
if ! "$APP_ROOT/bin/db-init"; then
  log "ERROR: Database initialization failed."
  exit 1
fi

log "Verifying database connection..."
if ! "$APP_ROOT/bin/check-db-connection"; then
  log "ERROR: Failed to connect to the database even after initialization."
  log "Please check your database configuration and try again."
  exit 1
fi

# Check if SolidQueue should be started
log "Checking if SolidQueue should be started..."
if [ "${SKIP_SOLID_QUEUE:-false}" != "true" ]; then
  log "Starting SolidQueue..."

  # Check if start_solid_queue script exists
  if [ -f "$APP_ROOT/bin/start_solid_queue" ]; then
    # Try to start SolidQueue using the script
    "$APP_ROOT/bin/start_solid_queue" &
    SOLID_QUEUE_PID=$!
    log "SolidQueue started with PID: $SOLID_QUEUE_PID"

    # Wait a moment to make sure it's running
    sleep 3

    # Verify that the process is still running
    if ps -p $SOLID_QUEUE_PID > /dev/null; then
      log "SolidQueue is running successfully (PID: $SOLID_QUEUE_PID)"
    else
      log "WARNING: SolidQueue failed to start using script. Trying alternative method..."
      # Try to start SolidQueue using Rails runner
      nohup bundle exec rails runner "SolidQueueManager.initialize_solid_queue" >> "$APP_ROOT/log/solid_queue.log" 2>&1 &
      SOLID_QUEUE_PID=$!
      log "SolidQueue started with Rails runner (PID: $SOLID_QUEUE_PID)"

      # Wait a moment to make sure it's running
      sleep 3

      # Verify that the process is still running
      if ps -p $SOLID_QUEUE_PID > /dev/null; then
        log "SolidQueue is running successfully with Rails runner (PID: $SOLID_QUEUE_PID)"
      else
        log "WARNING: SolidQueue failed to start with Rails runner. Continuing anyway..."
        # Set environment variable to use inline adapter for ActiveJob
        export ACTIVE_JOB_ADAPTER=inline
      fi
    fi
  else
    log "WARNING: start_solid_queue script not found. Trying alternative method..."
    # Try to start SolidQueue using Rails runner
    nohup bundle exec rails runner "SolidQueueManager.initialize_solid_queue" >> "$APP_ROOT/log/solid_queue.log" 2>&1 &
    SOLID_QUEUE_PID=$!
    log "SolidQueue started with Rails runner (PID: $SOLID_QUEUE_PID)"

    # Wait a moment to make sure it's running
    sleep 3

    # Verify that the process is still running
    if ps -p $SOLID_QUEUE_PID > /dev/null; then
      log "SolidQueue is running successfully with Rails runner (PID: $SOLID_QUEUE_PID)"
    else
      log "WARNING: SolidQueue failed to start with Rails runner. Continuing anyway..."
      # Set environment variable to use inline adapter for ActiveJob
      export ACTIVE_JOB_ADAPTER=inline
    fi
  fi
else
  log "Skipping SolidQueue startup (SKIP_SOLID_QUEUE=true)"
  # Set environment variable to use inline adapter for ActiveJob
  export ACTIVE_JOB_ADAPTER=inline
fi

# Start the Rails server
log "Starting Rails server..."
exec bundle exec rails server "$@"
