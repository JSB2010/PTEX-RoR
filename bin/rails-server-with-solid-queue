#!/usr/bin/env bash
# Start the Rails server with SolidQueue

# Start PostgreSQL if it's not running
if ! pg_isready -q; then
  echo "Starting PostgreSQL..."
  brew services start postgresql@14
  sleep 3
fi

# Start Redis if it's not running
if ! redis-cli ping > /dev/null 2>&1; then
  echo "Starting Redis..."
  brew services start redis
  sleep 2
fi

# Kill any existing SolidQueue processes
pkill_output=$(pgrep -f "solid_queue_monitor.rb" || echo "")
if [ -n "$pkill_output" ]; then
  echo "Killing existing SolidQueue processes: $pkill_output"
  pkill -f solid_queue_monitor.rb
  sleep 2
  
  # Double-check that processes are actually killed
  pkill_output=$(pgrep -f "solid_queue_monitor.rb" || echo "")
  if [ -n "$pkill_output" ]; then
    echo "Forcefully killing remaining processes: $pkill_output"
    pkill -9 -f solid_queue_monitor.rb
    sleep 1
  fi
fi

# Clean up any stale PID files
echo "Cleaning up stale PID files..."
find tmp/pids -name "*.pid" -delete 2>/dev/null || true
find tmp/pids -name "*.lock" -delete 2>/dev/null || true

# Clean up stale processes in the database
echo "Cleaning up stale processes in the database..."
cd "$(dirname "$0")/.."
bin/rails runner "begin; SolidQueue::Process.where(hostname: Socket.gethostname).destroy_all; rescue => e; puts \"Error cleaning up stale processes: #{e.message}\"; end"

# Start SolidQueue
echo "Starting SolidQueue monitor..."
nohup ruby bin/solid_queue_monitor.rb >> log/solid_queue_monitor.log 2>&1 &
SOLID_QUEUE_PID=$!
mkdir -p tmp/pids
echo $SOLID_QUEUE_PID > tmp/pids/solid_queue_monitor.pid
echo "SolidQueue started with PID: $SOLID_QUEUE_PID"

# Wait a moment to make sure it's running
sleep 3

# Verify that the process is still running
if ps -p $SOLID_QUEUE_PID > /dev/null; then
  echo "SolidQueue monitor is running successfully (PID: $SOLID_QUEUE_PID)"
else
  echo "WARNING: SolidQueue monitor may not have started properly. Check logs for details."
fi

# Start the Rails server
echo "Starting Rails server..."
exec bundle exec puma -C config/puma.rb "$@"
