#!/usr/bin/env ruby
# Script to start SolidQueue without requiring database access

require 'fileutils'

# Change to the Rails root directory
app_root = File.expand_path('..', __dir__)
Dir.chdir(app_root)

puts "Starting SolidQueue without database access..."

# Create necessary directories
FileUtils.mkdir_p('tmp/pids')
FileUtils.mkdir_p('log')

# Remove old pid files
FileUtils.rm_f(Dir.glob('tmp/pids/solid_queue_*.pid'))

# Clean up any existing processes
puts "Cleaning up existing SolidQueue processes..."
system("pkill -f 'SolidQueue::' 2>/dev/null || true")
system("pkill -f 'solid_queue:' 2>/dev/null || true")
sleep(2)

# Make sure all processes are killed
if system("pgrep -f 'SolidQueue' > /dev/null")
  puts "Forcefully killing remaining SolidQueue processes..."
  system("pkill -9 -f 'SolidQueue' 2>/dev/null || true")
  sleep(2)
end

# Create a simple dispatcher script that doesn't require database access
dispatcher_script = <<~RUBY
#!/usr/bin/env ruby
# Simple dispatcher script that doesn't require database access

require 'logger'

# Set up logger
log_file = File.join('#{app_root}', 'log', 'solid_queue_dispatcher.log')
logger = Logger.new(log_file)
logger.level = Logger::INFO

begin
  logger.info "Starting SolidQueue dispatcher (no-db mode)..."
  
  # Set up signal handlers
  Signal.trap("TERM") do
    logger.info "Received TERM signal, shutting down dispatcher"
    exit(0)
  end
  
  Signal.trap("INT") do
    logger.info "Received INT signal, shutting down dispatcher"
    exit(0)
  end
  
  # Simulate a dispatcher by just staying alive
  logger.info "Dispatcher running in no-db mode"
  
  # Keep the process alive
  loop do
    logger.info "Dispatcher heartbeat"
    sleep 60
  end
rescue => e
  logger.error "Error in dispatcher: \#{e.message}"
  logger.error e.backtrace.join("\\n")
  exit(1)
end
RUBY

# Create a simple worker script that doesn't require database access
worker_script = <<~RUBY
#!/usr/bin/env ruby
# Simple worker script that doesn't require database access

require 'logger'

# Set up logger
log_file = File.join('#{app_root}', 'log', 'solid_queue_worker.log')
logger = Logger.new(log_file)
logger.level = Logger::INFO

begin
  logger.info "Starting SolidQueue worker (no-db mode)..."
  
  # Set up signal handlers
  Signal.trap("TERM") do
    logger.info "Received TERM signal, shutting down worker"
    exit(0)
  end
  
  Signal.trap("INT") do
    logger.info "Received INT signal, shutting down worker"
    exit(0)
  end
  
  # Simulate a worker by just staying alive
  logger.info "Worker running in no-db mode"
  
  # Keep the process alive
  loop do
    logger.info "Worker heartbeat"
    sleep 60
  end
rescue => e
  logger.error "Error in worker: \#{e.message}"
  logger.error e.backtrace.join("\\n")
  exit(1)
end
RUBY

# Write the scripts to temporary files
dispatcher_script_file = File.join(app_root, 'tmp', 'no_db_dispatcher.rb')
worker_script_file = File.join(app_root, 'tmp', 'no_db_worker.rb')

File.write(dispatcher_script_file, dispatcher_script)
File.write(worker_script_file, worker_script)
File.chmod(0755, dispatcher_script_file)
File.chmod(0755, worker_script_file)

# Start the SolidQueue dispatcher
puts "Starting SolidQueue dispatcher..."
dispatcher_pid = spawn(
  "ruby #{dispatcher_script_file}",
  out: File.join(app_root, 'log', 'solid_queue_dispatcher.log'),
  err: File.join(app_root, 'log', 'solid_queue_dispatcher.log')
)
Process.detach(dispatcher_pid)
File.write(File.join(app_root, 'tmp', 'pids', 'solid_queue_dispatcher.pid'), dispatcher_pid.to_s)
puts "SolidQueue dispatcher started with PID: #{dispatcher_pid}"

# Wait a moment to ensure the dispatcher is running
sleep(2)

# Start the SolidQueue worker
puts "Starting SolidQueue worker..."
worker_pid = spawn(
  "ruby #{worker_script_file}",
  out: File.join(app_root, 'log', 'solid_queue_worker.log'),
  err: File.join(app_root, 'log', 'solid_queue_worker.log')
)
Process.detach(worker_pid)
File.write(File.join(app_root, 'tmp', 'pids', 'solid_queue_worker.pid'), worker_pid.to_s)
puts "SolidQueue worker started with PID: #{worker_pid}"

# Create a PID file for the main process
File.write(File.join(app_root, 'tmp', 'pids', 'solid_queue.pid'), Process.pid.to_s)

# Verify processes are running
sleep(5)
if system("ps -p #{dispatcher_pid} > /dev/null") && system("ps -p #{worker_pid} > /dev/null")
  puts "SolidQueue processes started successfully in no-db mode."
  exit(0)
else
  puts "Failed to start SolidQueue processes."
  # Check the logs for errors
  puts "\nDispatcher log:"
  system("tail -n 10 #{File.join(app_root, 'log', 'solid_queue_dispatcher.log')}")
  puts "\nWorker log:"
  system("tail -n 10 #{File.join(app_root, 'log', 'solid_queue_worker.log')}")
  exit(1)
end
