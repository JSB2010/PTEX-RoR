#!/usr/bin/env ruby
# A simple Ruby script to start the Rails server with all necessary services

require 'fileutils'

# Helper method to log messages
def log(message)
  puts "[#{Time.now.strftime('%Y-%m-%d %H:%M:%S')}] #{message}"
end

# Check if PostgreSQL is running
log "Checking PostgreSQL status..."
pg_running = system("pg_isready -q")
unless pg_running
  log "Starting PostgreSQL..."
  system("brew services start postgresql@14")
  sleep 5
  
  # Check again
  pg_running = system("pg_isready -q")
  unless pg_running
    log "ERROR: Failed to start PostgreSQL. Please start it manually."
    exit 1
  end
  
  log "PostgreSQL started successfully."
else
  log "PostgreSQL is already running."
end

# Check if Redis is running
log "Checking Redis status..."
redis_running = system("redis-cli ping > /dev/null 2>&1")
unless redis_running
  log "Starting Redis..."
  system("brew services start redis")
  sleep 3
  
  # Check again
  redis_running = system("redis-cli ping > /dev/null 2>&1")
  unless redis_running
    log "ERROR: Failed to start Redis. Please start it manually."
    exit 1
  end
  
  log "Redis started successfully."
else
  log "Redis is already running."
end

# Kill any existing SolidQueue processes
log "Checking for existing SolidQueue processes..."
pkill_output = `pgrep -f "solid_queue_monitor.rb" || echo ""`.strip
unless pkill_output.empty?
  log "Killing existing SolidQueue processes: #{pkill_output}"
  system("pkill -f solid_queue_monitor.rb")
  sleep 2
  
  # Double-check that processes are actually killed
  pkill_output = `pgrep -f "solid_queue_monitor.rb" || echo ""`.strip
  unless pkill_output.empty?
    log "Forcefully killing remaining processes: #{pkill_output}"
    system("pkill -9 -f solid_queue_monitor.rb")
    sleep 1
  end
end

# Kill any existing Rails runner processes
log "Checking for existing Rails runner processes..."
pkill_output = `pgrep -f "rails runner" || echo ""`.strip
unless pkill_output.empty?
  log "Killing existing Rails runner processes: #{pkill_output}"
  system("pkill -f \"rails runner\"")
  sleep 2
  
  # Double-check that processes are actually killed
  pkill_output = `pgrep -f "rails runner" || echo ""`.strip
  unless pkill_output.empty?
    log "Forcefully killing remaining processes: #{pkill_output}"
    system("pkill -9 -f \"rails runner\"")
    sleep 1
  end
end

# Clean up any stale PID files
log "Cleaning up stale PID files..."
Dir.glob(File.join(File.expand_path('..', __dir__), 'tmp', 'pids', "*.pid")).each do |file|
  begin
    File.delete(file)
  rescue => e
    log "Error deleting PID file #{file}: #{e.message}"
  end
end

# Set environment variable to use inline adapter for ActiveJob
ENV['ACTIVE_JOB_ADAPTER'] = 'inline'
ENV['SKIP_SOLID_QUEUE'] = 'true'

# Start the Rails server
log "Starting Rails server..."

# Use the original Rails command
require File.expand_path('../config/application', __dir__)
require File.expand_path('../config/boot', __dir__)
require 'rails/commands'
