#!/usr/bin/env ruby
# Script to ensure SolidQueue is running

require 'fileutils'
require 'socket'

# Change to the Rails root directory
app_root = File.expand_path('..', __dir__)
Dir.chdir(app_root)

puts "Ensuring SolidQueue is running..."

# Check if SolidQueue processes are running
dispatcher_running = false
worker_running = false

# Check for running processes using PID files
dispatcher_pid_file = File.join(app_root, 'tmp', 'pids', 'solid_queue_dispatcher.pid')
worker_pid_file = File.join(app_root, 'tmp', 'pids', 'solid_queue_worker.pid')

if File.exist?(dispatcher_pid_file)
  dispatcher_pid = File.read(dispatcher_pid_file).to_i
  if dispatcher_pid > 0 && system("ps -p #{dispatcher_pid} > /dev/null")
    dispatcher_running = true
    puts "Dispatcher is running with PID: #{dispatcher_pid}"
  end
end

if File.exist?(worker_pid_file)
  worker_pid = File.read(worker_pid_file).to_i
  if worker_pid > 0 && system("ps -p #{worker_pid} > /dev/null")
    worker_running = true
    puts "Worker is running with PID: #{worker_pid}"
  end
end

# If either process is not running, restart SolidQueue
if !dispatcher_running || !worker_running
  puts "SolidQueue is not running. Restarting..."
  
  # Stop any existing processes
  stop_script = File.join(app_root, 'bin', 'stop-resilient-solid-queue')
  if File.exist?(stop_script)
    system(stop_script)
  else
    # Fallback to pkill
    system("pkill -f 'SolidQueue::' 2>/dev/null || true")
    system("pkill -f 'solid_queue:' 2>/dev/null || true")
    sleep(1)
  end
  
  # Start SolidQueue
  start_script = File.join(app_root, 'bin', 'resilient-solid-queue')
  if File.exist?(start_script)
    system(start_script)
  else
    puts "SolidQueue start script not found at #{start_script}"
    exit(1)
  end
else
  puts "SolidQueue is running."
end

# Register fake processes in the database if needed
begin
  require File.join(app_root, 'config', 'environment')
  
  if defined?(SolidQueue::Process) && ActiveRecord::Base.connection.table_exists?('solid_queue_processes')
    hostname = Socket.gethostname
    
    # Check if processes are registered in the database
    dispatcher_registered = SolidQueue::Process.where(kind: "Dispatcher", hostname: hostname).exists?
    worker_registered = SolidQueue::Process.where(kind: "Worker", hostname: hostname).exists?
    
    if !dispatcher_registered || !worker_registered
      puts "SolidQueue processes are not registered in the database. Registering..."
      
      # Clean up existing processes for this host
      SolidQueue::Process.where(hostname: hostname).destroy_all
      
      # Register dispatcher
      if dispatcher_running
        SolidQueue::Process.create!(
          kind: "Dispatcher",
          name: "dispatcher-#{hostname}",
          pid: dispatcher_pid,
          hostname: hostname,
          last_heartbeat_at: Time.current,
          metadata: { polling_interval: 5 }.to_json
        )
        puts "Registered dispatcher process in database"
      end
      
      # Register worker
      if worker_running
        SolidQueue::Process.create!(
          kind: "Worker",
          name: "worker-#{hostname}",
          pid: worker_pid,
          hostname: hostname,
          last_heartbeat_at: Time.current,
          metadata: { concurrency: 1, queues: ["default"] }.to_json
        )
        puts "Registered worker process in database"
      end
    else
      puts "SolidQueue processes are registered in the database."
      
      # Update heartbeats
      SolidQueue::Process.where(hostname: hostname).update_all(last_heartbeat_at: Time.current)
      puts "Updated heartbeats for all processes"
    end
  end
rescue => e
  puts "Error checking database: #{e.message}"
end

puts "SolidQueue check complete."
