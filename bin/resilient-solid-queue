#!/usr/bin/env ruby
# Resilient script to start SolidQueue with better error handling and database connection resilience

require 'fileutils'
require 'socket'

# Change to the Rails root directory
app_root = File.expand_path('..', __dir__)
Dir.chdir(app_root)

puts "Starting resilient SolidQueue..."

# Create necessary directories
FileUtils.mkdir_p('tmp/pids')
FileUtils.mkdir_p('log')

# Remove old pid files
FileUtils.rm_f(Dir.glob('tmp/pids/solid_queue_*.pid'))

# Clean up any existing processes
puts "Cleaning up existing SolidQueue processes..."
system("pkill -f 'SolidQueue::' 2>/dev/null || true")
system("pkill -f 'solid_queue:' 2>/dev/null || true")
sleep(2)

# Make sure all processes are killed
if system("pgrep -f 'SolidQueue' > /dev/null")
  puts "Forcefully killing remaining SolidQueue processes..."
  system("pkill -9 -f 'SolidQueue' 2>/dev/null || true")
  sleep(2)
end

# Create dispatcher script with robust error handling and database connection resilience
dispatcher_script = <<~RUBY
#!/usr/bin/env ruby
# Dispatcher script with robust error handling and database connection resilience

require 'fileutils'
require 'socket'
require 'logger'

# Set up logger
log_file = File.join('#{app_root}', 'log', 'solid_queue_dispatcher.log')
logger = Logger.new(log_file)
logger.level = Logger::INFO

begin
  # Load Rails environment
  require File.join('#{app_root}', 'config', 'environment')
  
  # Register process in database if possible
  begin
    if defined?(SolidQueue::Process) && ActiveRecord::Base.connection.table_exists?('solid_queue_processes')
      process = SolidQueue::Process.create!(
        kind: "Dispatcher",
        name: "dispatcher-\#{Socket.gethostname}",
        pid: Process.pid,
        hostname: Socket.gethostname,
        last_heartbeat_at: Time.current,
        metadata: { polling_interval: 5 }.to_json
      )
      logger.info "Registered dispatcher process in database with ID: \#{process.id}"
      
      # Start heartbeat thread
      Thread.new do
        loop do
          begin
            process.update!(last_heartbeat_at: Time.current)
            sleep 15
          rescue => e
            logger.error "Heartbeat error: \#{e.message}"
            sleep 15
          end
        end
      end
    end
  rescue => e
    logger.error "Error registering process in database: \#{e.message}"
    logger.error e.backtrace.join("\\n")
    # Continue anyway - we'll run without database registration
  end
  
  # Set up signal handlers
  Signal.trap("TERM") do
    logger.info "Received TERM signal, shutting down dispatcher"
    exit(0)
  end
  
  Signal.trap("INT") do
    logger.info "Received INT signal, shutting down dispatcher"
    exit(0)
  end
  
  # Start the dispatcher with connection handling
  logger.info "Starting dispatcher..."
  
  # Create a dispatcher with connection handling
  dispatcher = SolidQueue::Dispatcher.new(polling_interval: 5)
  
  # Add connection handling if not already included
  unless SolidQueue::Dispatcher.included_modules.include?(SolidQueue::ConnectionHandling)
    class << dispatcher
      include SolidQueue::ConnectionHandling
    end
  end
  
  # Start the dispatcher with connection handling
  loop do
    begin
      dispatcher.with_connection_handling do
        dispatcher.poll
      end
      sleep 5
    rescue => e
      logger.error "Dispatcher error: \#{e.message}"
      logger.error e.backtrace.join("\\n")
      sleep 5
    end
  end
rescue => e
  logger.error "Fatal error in dispatcher: \#{e.message}"
  logger.error e.backtrace.join("\\n")
  exit(1)
end
RUBY

# Create worker script with robust error handling and database connection resilience
worker_script = <<~RUBY
#!/usr/bin/env ruby
# Worker script with robust error handling and database connection resilience

require 'fileutils'
require 'socket'
require 'logger'

# Set up logger
log_file = File.join('#{app_root}', 'log', 'solid_queue_worker.log')
logger = Logger.new(log_file)
logger.level = Logger::INFO

begin
  # Load Rails environment
  require File.join('#{app_root}', 'config', 'environment')
  
  # Register process in database if possible
  begin
    if defined?(SolidQueue::Process) && ActiveRecord::Base.connection.table_exists?('solid_queue_processes')
      process = SolidQueue::Process.create!(
        kind: "Worker",
        name: "worker-\#{Socket.gethostname}",
        pid: Process.pid,
        hostname: Socket.gethostname,
        last_heartbeat_at: Time.current,
        metadata: { concurrency: 1, queues: ["default"] }.to_json
      )
      logger.info "Registered worker process in database with ID: \#{process.id}"
      
      # Start heartbeat thread
      Thread.new do
        loop do
          begin
            process.update!(last_heartbeat_at: Time.current)
            sleep 15
          rescue => e
            logger.error "Heartbeat error: \#{e.message}"
            sleep 15
          end
        end
      end
    end
  rescue => e
    logger.error "Error registering process in database: \#{e.message}"
    logger.error e.backtrace.join("\\n")
    # Continue anyway - we'll run without database registration
  end
  
  # Set up signal handlers
  Signal.trap("TERM") do
    logger.info "Received TERM signal, shutting down worker"
    exit(0)
  end
  
  Signal.trap("INT") do
    logger.info "Received INT signal, shutting down worker"
    exit(0)
  end
  
  # Start the worker with connection handling
  logger.info "Starting worker..."
  
  # Create a worker with connection handling
  worker = SolidQueue::Worker.new(concurrency: 1)
  
  # Add connection handling if not already included
  unless SolidQueue::Worker.included_modules.include?(SolidQueue::ConnectionHandling)
    class << worker
      include SolidQueue::ConnectionHandling
    end
  end
  
  # Start the worker with connection handling
  loop do
    begin
      worker.with_connection_handling do
        worker.poll
      end
      sleep 5
    rescue => e
      logger.error "Worker error: \#{e.message}"
      logger.error e.backtrace.join("\\n")
      sleep 5
    end
  end
rescue => e
  logger.error "Fatal error in worker: \#{e.message}"
  logger.error e.backtrace.join("\\n")
  exit(1)
end
RUBY

# Write the scripts to temporary files
dispatcher_script_file = File.join(app_root, 'tmp', 'dispatcher_script.rb')
worker_script_file = File.join(app_root, 'tmp', 'worker_script.rb')

File.write(dispatcher_script_file, dispatcher_script)
File.write(worker_script_file, worker_script)
File.chmod(0755, dispatcher_script_file)
File.chmod(0755, worker_script_file)

# Start the SolidQueue dispatcher
puts "Starting SolidQueue dispatcher..."
dispatcher_pid = spawn(
  "ruby #{dispatcher_script_file}",
  out: File.join(app_root, 'log', 'solid_queue_dispatcher.log'),
  err: File.join(app_root, 'log', 'solid_queue_dispatcher.log')
)
Process.detach(dispatcher_pid)
File.write(File.join(app_root, 'tmp', 'pids', 'solid_queue_dispatcher.pid'), dispatcher_pid.to_s)
puts "SolidQueue dispatcher started with PID: #{dispatcher_pid}"

# Wait a moment to ensure the dispatcher is running
sleep(2)

# Start the SolidQueue worker
puts "Starting SolidQueue worker..."
worker_pid = spawn(
  "ruby #{worker_script_file}",
  out: File.join(app_root, 'log', 'solid_queue_worker.log'),
  err: File.join(app_root, 'log', 'solid_queue_worker.log')
)
Process.detach(worker_pid)
File.write(File.join(app_root, 'tmp', 'pids', 'solid_queue_worker.pid'), worker_pid.to_s)
puts "SolidQueue worker started with PID: #{worker_pid}"

# Create a PID file for the main process
File.write(File.join(app_root, 'tmp', 'pids', 'solid_queue.pid'), Process.pid.to_s)

# Verify processes are running
sleep(5)
if system("ps -p #{dispatcher_pid} > /dev/null") && system("ps -p #{worker_pid} > /dev/null")
  puts "SolidQueue processes started successfully."
  exit(0)
else
  puts "Failed to start SolidQueue processes."
  # Check the logs for errors
  puts "\nDispatcher log:"
  system("tail -n 10 #{File.join(app_root, 'log', 'solid_queue_dispatcher.log')}")
  puts "\nWorker log:"
  system("tail -n 10 #{File.join(app_root, 'log', 'solid_queue_worker.log')}")
  exit(1)
end
