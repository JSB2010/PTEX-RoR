#!/usr/bin/env ruby
require File.expand_path('../config/environment', __dir__)

PROCESS_TIMEOUT = 2.minutes
MAX_RESTART_ATTEMPTS = 3

class SolidQueueMonitor
  def initialize
    @running = true
    @restart_attempts = 0
    @logger = Logger.new(Rails.root.join('log', 'solid_queue_monitor.log'))
    @logger.level = Logger::INFO
  end

  def start
    setup_signal_handlers
    cleanup_stale_processes

    while @running
      begin
        monitor_processes
        sleep(15) # Check every 15 seconds
      rescue => e
        @logger.error "Monitor error: #{e.message}"
        @logger.error e.backtrace.join("\n")
        sleep(5) # Back off on errors
      end
    end
  ensure
    cleanup
  end

  private

  def monitor_processes
    # Check if any processes are stale and need cleanup
    stale_count = cleanup_stale_processes

    # Get current process count
    current_processes = SolidQueue::Process.where(hostname: Socket.gethostname)
    active_processes = current_processes.where("last_heartbeat_at > ?", 30.seconds.ago)

    if active_processes.empty?
      @logger.info "No active processes found, attempting restart..."
      attempt_restart if should_attempt_restart?
    else
      @restart_attempts = 0 # Reset counter when processes are running
    end
  end

  def cleanup_stale_processes
    count = 0
    SolidQueue::Process.transaction do
      stale = SolidQueue::Process.where("last_heartbeat_at < ?", PROCESS_TIMEOUT.ago)
      count = stale.count
      stale.find_each do |process|
        @logger.info "Cleaning up stale process: #{process.name} (#{process.id})"
        process.deregister
      end
    end
    count
  end

  def attempt_restart
    @restart_attempts += 1
    @logger.info "Attempting to restart SolidQueue processes (attempt #{@restart_attempts}/#{MAX_RESTART_ATTEMPTS})"
    
    system("bin/solid_queue stop")
    sleep 2
    system("bin/solid_queue start")
  end

  def should_attempt_restart?
    @restart_attempts < MAX_RESTART_ATTEMPTS
  end

  def setup_signal_handlers
    Signal.trap("TERM") { @running = false }
    Signal.trap("INT") { @running = false }
  end

  def cleanup
    @logger.info "Monitor shutting down..."
    system("bin/solid_queue stop")
  end
end

monitor = SolidQueueMonitor.new
monitor.start