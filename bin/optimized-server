#!/usr/bin/env bash
# Optimized Rails server script that handles all startup logic efficiently

# Function to log messages with timestamps
log() {
  echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

# Function to clean up resources before exit
cleanup() {
  log "Cleaning up resources..."

  # Kill Sidekiq processes if they were started by this script
  if [ -n "$SIDEKIQ_PID" ]; then
    log "Stopping Sidekiq processes..."
    for pid in $SIDEKIQ_PID; do
      log "Stopping Sidekiq process (PID: $pid)..."
      kill -TERM $pid 2>/dev/null || true
    done
  fi

  # Remove PID files
  rm -f tmp/pids/sidekiq*.pid 2>/dev/null || true

  log "Cleanup complete"
}

# Set up trap for clean exit
trap cleanup EXIT INT TERM

# Change to the Rails root directory
cd "$(dirname "$0")/.." || exit 1
APP_ROOT=$(pwd)

# Create necessary directories
mkdir -p "$APP_ROOT/tmp/pids"
mkdir -p "$APP_ROOT/log"

# Clean up any stale PID files
find tmp/pids -name "*.pid" -delete 2>/dev/null || true
find tmp/pids -name "*.lock" -delete 2>/dev/null || true

# Start PostgreSQL if it's not running
log "Checking PostgreSQL status..."
if ! pg_isready -q; then
  log "Starting PostgreSQL..."
  brew services start postgresql@14

  # Wait for PostgreSQL to start with a timeout
  for i in {1..10}; do
    sleep 1
    if pg_isready -q; then
      log "PostgreSQL started successfully."
      break
    fi
    if [ $i -eq 10 ]; then
      log "WARNING: PostgreSQL may not have started properly. Continuing anyway..."
    fi
  done
else
  log "PostgreSQL is already running."
fi

# Start Redis if it's not running
log "Checking Redis status..."
if ! redis-cli ping > /dev/null 2>&1; then
  log "Starting Redis..."
  brew services start redis

  # Wait for Redis to start with a timeout
  for i in {1..5}; do
    sleep 1
    if redis-cli ping > /dev/null 2>&1; then
      log "Redis started successfully."
      break
    fi
    if [ $i -eq 5 ]; then
      log "WARNING: Redis may not have started properly. Continuing anyway..."
    fi
  done
else
  log "Redis is already running."
fi

# Clean up log files if they're too large
for log_file in log/*.log; do
  if [ -f "$log_file" ]; then
    size=$(du -m "$log_file" 2>/dev/null | cut -f1) || size=0
    if [ "$size" -gt 10 ]; then
      log "Cleaning up large log file: $log_file ($size MB)"
      cat /dev/null > "$log_file" 2>/dev/null || true
    fi
  fi
done

# Start Sidekiq if needed
if [ "${SKIP_SIDEKIQ:-false}" != "true" ]; then
  log "Starting Sidekiq with optimized settings..."

  # Clean up any existing Sidekiq processes
  log "Cleaning up existing Sidekiq processes..."
  pkill -f "sidekiq" 2>/dev/null || true

  # Start Sidekiq with optimized settings
  log "Starting Sidekiq with reduced concurrency..."
  nohup bundle exec sidekiq -c 2 > log/sidekiq.log 2>&1 &
  SIDEKIQ_PID=$!
  echo $SIDEKIQ_PID > tmp/pids/sidekiq.pid
  log "Sidekiq started (PID: $SIDEKIQ_PID)"
else
  log "Skipping Sidekiq startup (SKIP_SIDEKIQ=true)"
fi

# Set environment variables for optimal performance
export SKIP_MIGRATION_CHECK=true
export RAILS_MAX_THREADS=5
export RAILS_MIN_THREADS=1
export WEB_CONCURRENCY=0 # No workers in development
export MALLOC_ARENA_MAX=2 # Reduce memory usage
export RUBY_GC_HEAP_INIT_SLOTS=600000
export RUBY_GC_HEAP_FREE_SLOTS_MIN_RATIO=0.20
export RUBY_GC_HEAP_FREE_SLOTS_GOAL_RATIO=0.40
export SIDEKIQ_CONCURRENCY=2 # Reduce concurrency for development
export OPTIMIZE_GC=true
export OPTIMIZE_AR=true
export OPTIMIZE_REDIS=true
export OPTIMIZE_APP=true

# Create a file to enable caching in development
touch tmp/caching-dev.txt

# Start the Rails server
log "Starting Rails server..."

# Use the standard Rails server command directly
exec bundle exec ruby "$APP_ROOT/bin/rails" server "$@"
