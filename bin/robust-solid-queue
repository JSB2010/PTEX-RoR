#!/usr/bin/env ruby
# Robust script to start and register SolidQueue processes

require 'fileutils'
require 'socket'

# Change to the Rails root directory
app_root = File.expand_path('..', __dir__)
Dir.chdir(app_root)

puts "Starting robust SolidQueue..."

# Create necessary directories
FileUtils.mkdir_p('tmp/pids')
FileUtils.mkdir_p('log')

# Remove old pid files
FileUtils.rm_f(Dir.glob('tmp/pids/solid_queue_*.pid'))

# Load Rails environment
require File.join(app_root, 'config', 'environment')

# Clean up any existing processes from this host
if defined?(SolidQueue::Process) && ActiveRecord::Base.connection.table_exists?('solid_queue_processes')
  hostname = Socket.gethostname
  puts "Cleaning up existing SolidQueue processes for host: #{hostname}"
  SolidQueue::Process.where(hostname: hostname).destroy_all
  
  # Clean up claimed executions with no process
  SolidQueue::ClaimedExecution
    .joins('LEFT JOIN solid_queue_processes ON solid_queue_processes.id = process_id')
    .where('solid_queue_processes.id IS NULL')
    .delete_all
end

# Create dispatcher script
dispatcher_script = <<~RUBY
  begin
    # Register the process first
    process = SolidQueue::Process.create!(
      kind: "Dispatcher",
      name: "dispatcher-\#{Socket.gethostname}-\#{SecureRandom.hex(4)}",
      pid: Process.pid,
      hostname: Socket.gethostname,
      last_heartbeat_at: Time.current,
      metadata: { polling_interval: 5 }.to_json
    )
    
    # Start heartbeat thread
    heartbeat_thread = Thread.new do
      while true
        begin
          process.update!(last_heartbeat_at: Time.current)
          sleep 15
        rescue => e
          Rails.logger.error("Heartbeat error: \#{e.message}")
          sleep 15
        end
      end
    end
    
    # Start the dispatcher
    dispatcher = SolidQueue::Dispatcher.new(polling_interval: 5)
    
    # Set up signal handlers
    Signal.trap("TERM") do
      Rails.logger.info("Received TERM signal, shutting down dispatcher")
      process.destroy
      exit(0)
    end
    
    Signal.trap("INT") do
      Rails.logger.info("Received INT signal, shutting down dispatcher")
      process.destroy
      exit(0)
    end
    
    # Start the dispatcher
    Rails.logger.info("Starting dispatcher \#{process.name}")
    dispatcher.start
  rescue => e
    Rails.logger.error("Dispatcher error: \#{e.message}")
    Rails.logger.error(e.backtrace.join("\\n"))
  end
RUBY

# Create worker script
worker_script = <<~RUBY
  begin
    # Register the process first
    process = SolidQueue::Process.create!(
      kind: "Worker",
      name: "worker-\#{Socket.gethostname}-\#{SecureRandom.hex(4)}",
      pid: Process.pid,
      hostname: Socket.gethostname,
      last_heartbeat_at: Time.current,
      metadata: { concurrency: 1, queues: ["default"] }.to_json
    )
    
    # Start heartbeat thread
    heartbeat_thread = Thread.new do
      while true
        begin
          process.update!(last_heartbeat_at: Time.current)
          sleep 15
        rescue => e
          Rails.logger.error("Heartbeat error: \#{e.message}")
          sleep 15
        end
      end
    end
    
    # Start the worker
    worker = SolidQueue::Worker.new(concurrency: 1)
    
    # Set up signal handlers
    Signal.trap("TERM") do
      Rails.logger.info("Received TERM signal, shutting down worker")
      process.destroy
      exit(0)
    end
    
    Signal.trap("INT") do
      Rails.logger.info("Received INT signal, shutting down worker")
      process.destroy
      exit(0)
    end
    
    # Start the worker
    Rails.logger.info("Starting worker \#{process.name}")
    worker.start
  rescue => e
    Rails.logger.error("Worker error: \#{e.message}")
    Rails.logger.error(e.backtrace.join("\\n"))
  end
RUBY

# Write the scripts to temporary files
dispatcher_script_file = File.join(app_root, 'tmp', 'dispatcher_script.rb')
worker_script_file = File.join(app_root, 'tmp', 'worker_script.rb')

File.write(dispatcher_script_file, dispatcher_script)
File.write(worker_script_file, worker_script)

# Start the SolidQueue dispatcher
puts "Starting SolidQueue dispatcher..."
dispatcher_pid = spawn(
  "cd #{app_root} && bin/rails runner #{dispatcher_script_file}",
  out: File.join(app_root, 'log', 'solid_queue_dispatcher.log'),
  err: File.join(app_root, 'log', 'solid_queue_dispatcher.log')
)
Process.detach(dispatcher_pid)
File.write(File.join(app_root, 'tmp', 'pids', 'solid_queue_dispatcher.pid'), dispatcher_pid.to_s)
puts "SolidQueue dispatcher started with PID: #{dispatcher_pid}"

# Wait a moment to ensure the dispatcher is running
sleep(2)

# Start the SolidQueue worker
puts "Starting SolidQueue worker..."
worker_pid = spawn(
  "cd #{app_root} && bin/rails runner #{worker_script_file}",
  out: File.join(app_root, 'log', 'solid_queue_worker.log'),
  err: File.join(app_root, 'log', 'solid_queue_worker.log')
)
Process.detach(worker_pid)
File.write(File.join(app_root, 'tmp', 'pids', 'solid_queue_worker.pid'), worker_pid.to_s)
puts "SolidQueue worker started with PID: #{worker_pid}"

# Verify processes are running
sleep(5)
if system("ps -p #{dispatcher_pid} > /dev/null") && system("ps -p #{worker_pid} > /dev/null")
  puts "SolidQueue processes started successfully."
  
  # Verify database registration
  require File.join(app_root, 'config', 'environment')
  dispatcher_count = SolidQueue::Process.where(kind: "Dispatcher").count
  worker_count = SolidQueue::Process.where(kind: "Worker").count
  
  puts "Registered processes in database: #{dispatcher_count} dispatchers, #{worker_count} workers"
  
  if dispatcher_count > 0 && worker_count > 0
    puts "SolidQueue is fully operational!"
    exit(0)
  else
    puts "WARNING: SolidQueue processes are running but not registered in the database."
    exit(1)
  end
else
  puts "Failed to start SolidQueue processes."
  # Check the logs for errors
  puts "\nDispatcher log:"
  system("tail -n 10 #{File.join(app_root, 'log', 'solid_queue_dispatcher.log')}")
  puts "\nWorker log:"
  system("tail -n 10 #{File.join(app_root, 'log', 'solid_queue_worker.log')}")
  exit(1)
end
